-- SQL-запрос используется для построения чарта с динамикой прироста клиентской базы в разрезе месяцев и 
-- нарастающим итогом 
-- Запрос извлекает данные из таблицы dwh.contacts_info, вычисляет общее количество клиентов в каждом месяце, 
-- а затем рассчитывает накопленную сумму клиентов до конца каждого месяца. Результатом запроса является таблица с колонками: 
-- месяц и год
-- количество клиентов 
-- накопленное количество клиентов
-- Исследование результатов запроса полезно для анализа динамики увеличения клиентской базы, выявления тенденций и аномалий 
  
-- Входные данные:
-- Запрос использует данные из таблицы dwh.contacts_info, которая содержит информацию о контактах клиентов, их дате регистрации 
-- и других связанных данных
  
-- Выходные данные:
-- Результатом выполнения запроса является таблица с колонками: месяц и год, количество клиентов, накопленное количество клиентов 
  
-- Алгоритм:
-- 1. Внутри запроса используется подзапрос для вычисления общего количества клиентов в каждом месяце и рассчитывается 
-- накопленное количество клиентов для каждого месяца
--2. Результаты фильтруются по указанному временному диапазону для анализа и группируются по месяцам
  
-- Ожидаемый результат:
-- Результатом работы запроса является таблица с обобщенными данными о накопленном количестве клиентов, 
-- сгруппированными по месяцам в указанном временном диапазоне
  
----------------------------------------------------------------------------------------


SELECT y_m AS __timestamp,
       sum(cum_sum) AS "Количество клиентов (нарастающий итог)"
FROM
  (WITH contacts_cumsum AS
     (SELECT y_m,
             sumState(contact_qty) as contact
      FROM
        (SELECT toStartOfMonth(registration_d) as y_m,
                uniqExact(contact_id) as contact_qty
         FROM dwh.contacts_info
         WHERE state_contact = 0
           and (registration_d < '2100-01-01'
                or registration_d = '1970-01-01')
         GROUP BY toStartOfMonth(registration_d)
         ORDER  BY toStartOfMonth(registration_d) ASC)
      GROUP BY y_m
      ORDER BY y_m ASC) SELECT y_m,
                               runningAccumulate(contact) as cum_sum,
                               finalizeAggregation(contact) as contacts_monthly
   FROM contacts_cumsum
   ORDER BY y_m ASC) AS virtual_table
WHERE y_m >= toDate('2020-05-01')
  AND y_m < toDate('2020-12-01')
GROUP BY y_m
ORDER BY "Количество клиентов (нарастающий итог)" DESC
